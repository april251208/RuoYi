import { PureComponent, Fragment } from 'react';
import { DownOutlined,SearchOutlined,EditOutlined,DeleteOutlined, PlusOutlined } from '@ant-design/icons';
import { history, connect} from 'umi';

import {
    Card,
    Button,
    Dropdown,
    Menu,
    message,
    DatePicker,
    Divider,
    Popconfirm,
} from 'antd';

import ${ClassName}RenderSimpleForm from './form${ClassName}RenderSimpleForm'; //简单查询表单
import ${ClassName}RenderAdvancedForm from './form${ClassName}RenderAdvancedForm'; //高级查询表单


import StandardTable from '@/components/StandardTable';

import style from '@/global.less';
import styles from './.${ClassName}List.less';


/* eslint react/no-multi-comp:0 */
@connect(({ ${className}, loading}) => ({
        ${className},
    loading: loading.models.${className},
})) class ${ClassName}List extends PureComponent {

    state = {
        modalVisible: false,
        updateModalVisible: false,
        viewModalVisible: false,
        expandForm: false,
        selectedRows: [],
        formValues: {},
        updateFormValues: {},
        viewFormValues: {},

        data: [],
    };

    columns = [

        #foreach($column in $columns)
            #if($column.query)
                #set($parentheseIndex=$column.columnComment.indexOf("（"))
                #if($parentheseIndex != -1)
                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
                #else
                    #set($comment=$column.columnComment)
                #end
                {
                    title: '${comment}',
                    dataIndex: '${column.javaField}',
                    width: '120',
                    sorter: (a, b) => a.prop1 - b.prop1,
                },
            #end
        #end

    ];

    componentDidMount() {
        const {dispatch} = this.props;
        dispatch({
            type: '${className}/query_page_for${className}',
        });
        this.handleSearch()
        let obj = {}
        this.columns.map(e => {
            obj.id = 1
            obj[e.dataIndex] = '0'
        })
        this.props.${className}.data.list = [obj, {...obj, id: 2, zhje: 1, dj: 2}]
    }


    handleStandardTableChange = (pagination, filtersArg, sorter) => {

        const {dispatch} = this.props;
        const {formValues} = this.state;

        const params = {
            currentPage: pagination.current,
            pageSize: pagination.pageSize,
            ...formValues,
        };

        if (sorter.field) {
            params.sorter = `${sorter.field}_${sorter.order}`;
        }

        dispatch({
            type: '${className}/query_page_for${className}',
            payload: params,
        });


    };


    handleFormReset = () => {
        const {dispatch} = this.props;
        this.setState({
            formValues: {},
        });
        dispatch({
            type: '${className}/query_page_for${className}',
            payload: {},
        });

    };

    toggleForm = () => {

        const {expandForm} = this.state;
        this.setState({
            expandForm: !expandForm,
        });
    };

    handleSelectRows = rows => {
        this.setState({
            selectedRows: rows,
        });
    };

    handleSearch = values => {
        const {dispatch} = this.props;
        this.setState({
            formValues: values,
        });

        dispatch({
            type: '${className}/query_page_for${className}',
            payload: values,
        });

    };

    handleModalVisible = flag => {
        this.setState({
            modalVisible: !!flag,
        });
    };

    handleUpdateModalVisible = (flag, record) => {
        this.setState({
            updateModalVisible: !!flag,
            updateFormValues: record || {},
        });
    };

    handleViewModalVisible = (flag, record) => {
        this.setState({
            viewModalVisible: !!flag,
            viewFormValues: record || {},
        });

    };

    handleAdd = fields => {

        const {dispatch} = this.props;
        dispatch({
            type: '${className}/insert_for${className}',
            payload: {
                #foreach($column in $columns)
                    #if($column.query)
                        #set($parentheseIndex=$column.columnComment.indexOf("（"))
                        #if($parentheseIndex != -1)
                            #set($comment=$column.columnComment.substring(0, $parentheseIndex))
                        #else
                            #set($comment=$column.columnComment)
                        #end
                            ${column.javaField}: fields.${column.javaField},//${comment}
                    #end
                #end
            },
        });

        message.success('添加成功');
        this.handleModalVisible();

    };


    handleDeleteRecord = record => {

        const {dispatch} = this.props;

        dispatch({
            type: '${className}/delete_by_primarykey_for${className}',
            payload: {
                recordid: record.id,
            },
            callback: () => {
                this.setState({
                    selectedRows: [],
                });
            },
        });

        message.success('删除成功');


    };

    handleUpdate = fields => {

        const {dispatch} = this.props;
        dispatch({
            type: '${className}/update_for${className}',
            payload: {
                #foreach($column in $columns)
                    #if($column.query)
                        #set($parentheseIndex=$column.columnComment.indexOf("（"))
                        #if($parentheseIndex != -1)
                            #set($comment=$column.columnComment.substring(0, $parentheseIndex))
                        #else
                            #set($comment=$column.columnComment)
                        #end
                            ${column.javaField}: fields.${column.javaField},//${comment}
                    #end
                #end
            },
        });

        message.success('修改成功');
        this.handleUpdateModalVisible();

    };

    renderSimpleForm() {

        const parentMethods = {
            handleSearch: this.handleSearch,
            handleFormReset: this.handleFormReset,
            toggleForm: this.toggleForm,
            submitButtons: styles.submitButtons,
        };

        return (

            <${ClassName}RenderSimpleForm {...parentMethods}/>

        );

    }


     renderAdvancedForm() {

         const parentMethods = {
             handleSearch: this.handleSearch,
             handleFormReset: this.handleFormReset,
             toggleForm: this.toggleForm,
         };

         return (

             <${ClassName}RenderAdvancedForm {...parentMethods}/>
         );

     }

    renderForm() {
        const {expandForm} = this.state;
        return expandForm ? this.renderAdvancedForm() : this.renderSimpleForm();
    }

    onShowSizeChange = (current, pageSize) => {
        console.log(current, pageSize, 'onShowSizeChange');
    }

    render() {

        const {
            ${className}: {data, expandForm},
            loading,
        } = this.props;


        const {
            selectedRows,
            modalVisible,
            updateModalVisible,
            viewModalVisible,
            updateFormValues,
            viewFormValues
        } = this.state;

        const parentMethods = {
            handleAdd: this.handleAdd,
            handleModalVisible: this.handleModalVisible,
        };
        const updateMethods = {
            handleUpdateModalVisible: this.handleUpdateModalVisible,
            handleUpdate: this.handleUpdate,
        };
        const viewMethods = {
            handleViewModalVisible: this.handleViewModalVisible
        };
        return (

            <div>
                <Card bordered={false}>
                    <div className={styles.${ClassName}tableList}>

                        <div className={styles.${ClassName}tableListForm}>{this.renderForm()}</div>


                        <div className={styles.${ClassName}tableListOperator}>

                            <Button type="primary" onClick={() => this.handleModalVisible(true)}>
                                <PlusOutlined /> 新建
                            </Button>
                            {selectedRows.length > 0 && (
                                <span>
                                    <Button>批量操作</Button>
                                    <Dropdown overlay={menu}>
                                        <Button>
                                            更多操作 <DownOutlined />
                                        </Button>
                                    </Dropdown>
                                </span>
                            )}
                        </div>

                        <StandardTable
                            rowKey={"id"}
                            selectedRows={selectedRows}
                            loading={loading}
                            data={data}
                            columns={this.columns}
                            onSelectRow={this.handleSelectRows}
                            onChange={this.handleStandardTableChange}
                        />
                    </div>
                </Card>
                <${ClassName}CreateForm {...parentMethods} modalVisible={modalVisible} />


                {updateFormValues && Object.keys(updateFormValues).length ? (
                    <${ClassName}UpdateForm
                        {...updateMethods}
                        updateModalVisible={updateModalVisible}
                        values={updateFormValues}
                    />
                ) : null}


                {viewFormValues && Object.keys(viewFormValues).length ? (
                    <${ClassName}ViewForm
                        {...viewMethods}
                        viewModalVisible={viewModalVisible}
                        values={viewFormValues}
                    />
                ) : null}

            </div>

        );
    }


}


export default ${ClassName}List;